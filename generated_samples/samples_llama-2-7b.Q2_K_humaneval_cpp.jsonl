{"task_id": "CPP/0", "generation": "\tint counter = 0;\n\tfor (size_t i=1;i<numbers.size();++i) if (fabs(numbers[0] - numbers[i]) < 0.5) ++counter;\n\tif (counter > 0 && counter < numbers.size() / 2 ) return true ; else return false;\n}\n"}
{"task_id": "CPP/1", "generation": "\tint curly_count = 0;\n\t//cur_index = 0\n\tfor(int i=0,j=0;i<(int)paren_string.size();i++){\n\t\tif(paren_string[i]=='('){\n\t\t\t++curly_count;\n\t\t}else if(paren_string[i]==')')){\n\t\t\tif(curly_count<2)break;\n\t\t\t--curly_count;\n\t\t}else if(paren_string[i]=='{'){\n\t\t\tj=0;\n\t\t\t++curly_count;\n\t\t}else{\n\t\t\tif(paren_string[i]!='(' && paren_string[i]!='{')break;\n\t\t\tcurly_count--;\n\t\t}\n\t}\n\treturn vector<string>(i,j);\n}\nint main(){\n\tvector<string> groups = separate_paren_groups(\"( ) (( )) (( )( ))\");\n\tfor_each(vec_begin(groups), vec_end(groups), cout<<\"Group: \"<<\\\ncout<<group_name(i,groups)<<\" is of Length: \"+to_string(group_size(i,groups)))<<endl;// prints ( ), (( ) , )()\n}\n"}
{"task_id": "CPP/2", "generation": "\tint part = (int)(number);\n\treturn float(floor(part));\n}\n"}
{"task_id": "CPP/3", "generation": "\tif(operations[0] > operations[operations.size()-1]){ //check max balance of account\n\t\treturn true;\n\t}else {\n\t\tfor (size_t i = 0; i < operations.size(); ++i) { //check for negative balances\n\t\t\tif(operations[i] > operations[i + 1]){ //make sure to check the next operation as well\n\t\t\t\treturn true;\n\t\t\t}else if((!operations[i]) && (operations[i+1])) { //check for negative balances\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint main(){\n\tvector<int> operations = vector<int>(5, 0);\n\toperations[0] = 1;\n\toperations[1] = 2;\n\toperations[2] = -4; //negative deposit\n\toperations[3] = 5; //positive withdrawal\n\tif(below_zero(operations)){\n\t\tprintf(\"account balance falls below zero at operations[0].\\n\");\n\t}else {\n\t\tprintf(\"No, account balance stays above zero till operations[operations.size() - 1]\\n\");\n\t}\n\treturn 0;\n}\n"}
{"task_id": "CPP/4", "generation": "\tfloat mean = 0;\n\tfor (int i = 0;i < numbers.size();i++){\n\t\tmean+=numbers[i];\n\t}\n\n\tif(numbers.empty()){\n\t\treturn 0;\n\t}else{\n\t\tmean = mean/ numbers.size();\n\t}\n\treturn fabs(mean) / (float)numbers.size();\n}\n"}
{"task_id": "CPP/5", "generation": "\tvector<int> temp_vec;  \n    int i, j;\n    for (i=0; i<numbers.size(); i++){\n        if(!(i%delimeter)) { // Check if we are on the first or last position of the loop.\n            if(!j){ \n                     temp_vec.push_back(numbers[i]);  \n             } else {// Checks to see if the j-th element is equal with that in the vector. If so, it removes the j-th element and adds to vector a copy of numbers[i]\n                for (j=0; j<i; j++) { // Goes through the vector from 0 to i-1.\n                    if(temp_vec[i-1]==numbers[j]){// If we find the element equal with it, breaks the loop and does not add to temp_vec another copy of numbers[i].\n                        break;\n                }\n            }}temp_vec.push_back(numbers[i]);\n        }  else { // It doesn't print numbers if i is neither divisible by delimeter nor ends in it.\n             j++;\n        }  \n    } return temp_vec;\n}\n"}
