{"task_id": "Go/0", "generation": "    if len(numbers) < 2 {\n        return false\n    }\n    for i := 0; i < len(numbers); i++ {\n        for j, n := range numbers[1 : len(numbers)-1] {\n            if distSquared(n, numbers[i]) >= threshold*threshold && !math.IsNaN(distSquared(n, numbers[i])) {\n                return true\n            }\n        }\n    }\n    // Not found.\n    return false\n}\n"}
{"task_id": "Go/1", "generation": "    var output []string\n    for i, c := range paren_string {\n        switch c {\n          case ')':\n            if i == 0 {\n                break\n             }\n         }\n        switch c {\n          case '(':\n           if i == 0 {\n              continue\n           } else {\n               output = append(output,paren_string[:i])\n               break\n           }\n       case ')':\n            output = append(output,paren_string[:i])\n            \n         default:\n          }\n    }\n  return output\n}\n"}
{"task_id": "Go/2", "generation": "    if math.IsNaN(number) || math.IsInf(number,1)||math.IsInf(number,-1){\n        return number\n    }else{\n        if number < math.MaxFloat64-1 && number >= 0 {\n            return float64(int64_t(number)) - 1\n        }else if number > math.MaxFloat64+1 && number <= math.MaxFloat64/2 {\n            return (float64(int64_t(math.MaxFloat64))) + int64_t(number)\n        }else{\n            return float64(int64_t(number)) - 1\n        }\n    }\n}\n"}
{"task_id": "Go/3", "generation": "    balance := 0\n    for _, operation := range operations {\n        switch op{\n             case Withdrawal:\n                balance = balance - operation\n             case Deposit:\n                balance = balance + operation\n        }\n    }\n    return balance < 0\n}\n"}
{"task_id": "Go/4", "generation": "    if len(numbers) == 0 {\n        return math.NaN()\n    }\n    avg := statistics.Mean(numbers...)\n    count := len(numbers)\n    dist := 0.0\n    for _, v := range numbers {\n        dist += math.Abs(v - avg)\n    }\n    return float64(count / float64(dist))\n}\n"}
{"task_id": "Go/5", "generation": "\tif numbers == nil || len(numbers) < 2 {\n\t\treturn numbers\n\t} else if number, ok := numbers[0]; ok && numbers[1-ok][0:1] == 4 {\n\t\treturn numbers\n\t}\n\treturn append(numbers[:], delimeter, numbers[len(numbers)-ok:]...)\n}\n"}
