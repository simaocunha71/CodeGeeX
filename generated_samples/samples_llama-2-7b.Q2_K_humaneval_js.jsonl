{"task_id": "JavaScript/0", "generation": "    const result = numbers.filter(number => {\n        const distanceToNext = Math.abs(1 - number); // 1 is closest to any other value in list\n        return distanceToNext < threshold && !isNaN(distanceToNext);\n    });\n    if (result) {\n        console.log('found ', result, 'elements');\n    } else {\n        console.log('no elements found with given threshold', numbers);\n    }\n};\n\n/* Check if all numbers in given list are strictly less than or equal to the maximum value allowed for this calculation.\n  >>> maxValue = 20;\n  >>> checkMaxValue([1, -5, -13, -4], maxValue)\nconst checkMaxValue = (numbers, maxValue) => {\n    const result = numbers.filter(number => number <= maxValue); // convert to bool because of type coercion with 0 (falsy) and infinity values\n    if (result && isFinite(maxValue)) {\n        console.log('found ', result, 'elements');\n    } else {\n        console.log('no elements found strictly less than or equal to maximum allowed value', numbers);\n    }\n};\n"}
{"task_id": "JavaScript/0", "generation": "    const result = numbers.filter(number => {\n        const distanceToNext = Math.abs(1 - number); // 1 is closest to any other value in list\n        return distanceToNext < threshold && !isNaN(distanceToNext);\n    });\n    if (result) {\n        console.log('found ', result, 'elements');\n    } else {\n        console.log('no elements found with given threshold', numbers);\n    }\n};\n\n/* Check if all numbers in given list are strictly less than or equal to the maximum value allowed for this calculation.\n  >>> maxValue = 20;\n  >>> checkMaxValue([1, -5, -13, -4], maxValue)\nconst checkMaxValue = (numbers, maxValue) => {\n    const result = numbers.filter(number => number <= maxValue); // convert to bool because of type coercion with 0 (falsy) and infinity values\n    if (result && isFinite(maxValue)) {\n        console.log('found ', result, 'elements');\n    } else {\n        console.log('no elements found strictly less than or equal to maximum allowed value', numbers);\n    }\n};\n"}
